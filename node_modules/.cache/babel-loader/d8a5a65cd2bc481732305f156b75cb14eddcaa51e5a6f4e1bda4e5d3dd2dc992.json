{"ast":null,"code":"var _jsxFileName = \"/Users/sameershaik/Desktop/mapbox-react/src/mapbox-gl/MapboxGl.js\",\n  _s = $RefreshSig$();\n// src/mapbox-gl/MapboxGl.js\nimport React, { useEffect, useRef, useState } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport '@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css';\nimport { circle as turfCircle } from '@turf/turf';\nimport '../App.css';\n\n// Token from .env\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_TOKEN;\nexport default function MapboxGl() {\n  _s();\n  const mapContainer = useRef(null);\n  const mapRef = useRef(null);\n  const lastQuakesRef = useRef(null);\n  const spinRef = useRef(true);\n  const [projection, setProjection] = useState('globe');\n\n  // Initialize map and controls\n  useEffect(() => {\n    const map = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: 'mapbox://styles/mapbox/satellite-v9',\n      projection: projection,\n      center: [0, 20],\n      zoom: 1.5,\n      antialias: true\n    });\n    mapRef.current = map;\n\n    // Geocoder control\n    map.addControl(new MapboxGeocoder({\n      accessToken: mapboxgl.accessToken,\n      mapboxgl\n    }), 'top-left');\n    map.on('load', () => {\n      map.setFog({});\n\n      // initial fetch and set up sources/layers\n      fetchAndUpdate(true);\n\n      // poll every minute for new quakes\n      const interval = setInterval(() => fetchAndUpdate(false), 60000);\n\n      // start rotation\n      startSpin();\n      return () => {\n        clearInterval(interval);\n        map.remove();\n      };\n    });\n\n    // Cleanup function\n    return () => {\n      if (mapRef.current) {\n        mapRef.current.remove();\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // Only run once on mount\n\n  // Update projection on change\n  useEffect(() => {\n    if (mapRef.current) {\n      mapRef.current.setProjection({\n        name: projection\n      });\n    }\n  }, [projection]);\n\n  // Fetch USGS data, update sources, notify new quakes, draw buffers\n  async function fetchAndUpdate(initial) {\n    try {\n      const past30 = new Date(Date.now() - 30 * 24 * 3600 * 1000).toISOString().split('T')[0];\n      const url = `https://earthquake.usgs.gov/fdsnws/event/1/query?format=geojson&starttime=${past30}&minmagnitude=5`;\n      const res = await fetch(url);\n      const data = await res.json();\n      const features = data.features;\n\n      // Notify any new quakes\n      if (!initial) {\n        var _lastQuakesRef$curren;\n        const prevIds = (((_lastQuakesRef$curren = lastQuakesRef.current) === null || _lastQuakesRef$curren === void 0 ? void 0 : _lastQuakesRef$curren.features) || []).map(f => f.id);\n        for (const f of features) {\n          if (f.id && !prevIds.includes(f.id)) {\n            const mag = f.properties.mag;\n            if (mag >= 5) {\n              if (Notification.permission === 'granted') {\n                new Notification(`M${mag.toFixed(1)} quake`, {\n                  body: f.properties.place\n                });\n              } else {\n                Notification.requestPermission();\n              }\n            }\n          }\n        }\n      }\n\n      // Set or update point source\n      if (initial) {\n        mapRef.current.addSource('quake-points', {\n          type: 'geojson',\n          data\n        });\n        mapRef.current.addLayer({\n          id: 'quake-points',\n          type: 'circle',\n          source: 'quake-points',\n          paint: {\n            'circle-color': '#E55E5E',\n            'circle-opacity': 0.8,\n            // radius ∝ magnitude\n            'circle-radius': ['interpolate', ['linear'], ['get', 'mag'], 5, 6, 8, 12, 10, 20]\n          }\n        });\n        // popups\n        mapRef.current.on('click', 'quake-points', ev => {\n          const {\n            place,\n            mag,\n            time\n          } = ev.features[0].properties;\n          const date = new Date(time).toLocaleString();\n          new mapboxgl.Popup({\n            closeButton: false\n          }).setLngLat(ev.lngLat).setHTML(`<strong>${place}</strong><br/>Mag: ${mag.toFixed(1)}<br/>${date}`).addTo(mapRef.current);\n        });\n      } else {\n        mapRef.current.getSource('quake-points').setData(data);\n      }\n\n      // Generate buffer polygons for risk zones\n      const zones = features.map(f => {\n        const radiusKm = f.properties.mag * 5; // e.g. 5 km per mag unit\n        const buffer = turfCircle(f.geometry.coordinates, radiusKm, {\n          steps: 64,\n          units: 'kilometers'\n        });\n        buffer.properties = {\n          ...f.properties,\n          radiusKm\n        };\n        return buffer;\n      });\n      const zoneFC = {\n        type: 'FeatureCollection',\n        features: zones\n      };\n      if (initial) {\n        mapRef.current.addSource('quake-zones', {\n          type: 'geojson',\n          data: zoneFC\n        });\n        mapRef.current.addLayer({\n          id: 'quake-zones-fill',\n          type: 'fill',\n          source: 'quake-zones',\n          paint: {\n            'fill-color': 'rgba(255,200,200,0.3)',\n            'fill-outline-color': 'rgba(255,100,100,0.5)'\n          }\n        });\n      } else {\n        mapRef.current.getSource('quake-zones').setData(zoneFC);\n      }\n\n      // save for next poll\n      lastQuakesRef.current = data;\n    } catch (e) {\n      console.error('USGS fetch error:', e);\n    }\n  }\n\n  // Continuous spin via requestAnimationFrame\n  function startSpin() {\n    const map = mapRef.current;\n    let frame;\n    const animate = () => {\n      if (!spinRef.current) return;\n      const c = map.getCenter();\n      c.lng -= 0.05;\n      map.jumpTo({\n        center: [c.lng, c.lat]\n      });\n      frame = requestAnimationFrame(animate);\n    };\n    animate();\n    return () => cancelAnimationFrame(frame);\n  }\n  function toggleSpin() {\n    spinRef.current = !spinRef.current;\n    if (spinRef.current) startSpin();\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapContainer,\n      id: \"map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: [\"Projection:\", /*#__PURE__*/_jsxDEV(\"select\", {\n          value: projection,\n          onChange: e => setProjection(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"globe\",\n            children: \"Globe\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"mercator\",\n            children: \"Mercator\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"winkelTripel\",\n            children: \"Winkel-Tripel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"robinson\",\n            children: \"Robinson\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleSpin,\n        children: \"Toggle Rotation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(MapboxGl, \"H0bf2xBnJ+BTCtaphByd+3YwIME=\");\n_c = MapboxGl;\nvar _c;\n$RefreshReg$(_c, \"MapboxGl\");","map":{"version":3,"names":["React","useEffect","useRef","useState","mapboxgl","MapboxGeocoder","circle","turfCircle","jsxDEV","_jsxDEV","Fragment","_Fragment","accessToken","process","env","REACT_APP_MAPBOX_TOKEN","MapboxGl","_s","mapContainer","mapRef","lastQuakesRef","spinRef","projection","setProjection","map","Map","container","current","style","center","zoom","antialias","addControl","on","setFog","fetchAndUpdate","interval","setInterval","startSpin","clearInterval","remove","name","initial","past30","Date","now","toISOString","split","url","res","fetch","data","json","features","_lastQuakesRef$curren","prevIds","f","id","includes","mag","properties","Notification","permission","toFixed","body","place","requestPermission","addSource","type","addLayer","source","paint","ev","time","date","toLocaleString","Popup","closeButton","setLngLat","lngLat","setHTML","addTo","getSource","setData","zones","radiusKm","buffer","geometry","coordinates","steps","units","zoneFC","e","console","error","frame","animate","c","getCenter","lng","jumpTo","lat","requestAnimationFrame","cancelAnimationFrame","toggleSpin","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","className","value","onChange","target","onClick","_c","$RefreshReg$"],"sources":["/Users/sameershaik/Desktop/mapbox-react/src/mapbox-gl/MapboxGl.js"],"sourcesContent":["// src/mapbox-gl/MapboxGl.js\nimport React, { useEffect, useRef, useState } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport '@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css';\nimport { circle as turfCircle } from '@turf/turf';\nimport '../App.css';\n\n// Token from .env\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_TOKEN;\n\nexport default function MapboxGl() {\n  const mapContainer = useRef(null);\n  const mapRef = useRef(null);\n  const lastQuakesRef = useRef(null);\n  const spinRef = useRef(true);\n  const [projection, setProjection] = useState('globe');\n\n  // Initialize map and controls\n  useEffect(() => {\n    const map = new mapboxgl.Map({\n      container: mapContainer.current,\n      style: 'mapbox://styles/mapbox/satellite-v9',\n      projection: projection,\n      center: [0, 20],\n      zoom: 1.5,\n      antialias: true,\n    });\n    mapRef.current = map;\n\n    // Geocoder control\n    map.addControl(\n      new MapboxGeocoder({\n        accessToken: mapboxgl.accessToken,\n        mapboxgl\n      }),\n      'top-left'\n    );\n\n    map.on('load', () => {\n      map.setFog({});\n\n      // initial fetch and set up sources/layers\n      fetchAndUpdate(true);\n\n      // poll every minute for new quakes\n      const interval = setInterval(() => fetchAndUpdate(false), 60_000);\n\n      // start rotation\n      startSpin();\n\n      return () => {\n        clearInterval(interval);\n        map.remove();\n      };\n    });\n\n    // Cleanup function\n    return () => {\n      if (mapRef.current) {\n        mapRef.current.remove();\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // Only run once on mount\n\n  // Update projection on change\n  useEffect(() => {\n    if (mapRef.current) {\n      mapRef.current.setProjection({ name: projection });\n    }\n  }, [projection]);\n\n  // Fetch USGS data, update sources, notify new quakes, draw buffers\n  async function fetchAndUpdate(initial) {\n    try {\n      const past30 = new Date(Date.now() - 30 * 24 * 3600 * 1000)\n        .toISOString()\n        .split('T')[0];\n      const url =\n        `https://earthquake.usgs.gov/fdsnws/event/1/query?format=geojson&starttime=${past30}&minmagnitude=5`;\n      const res = await fetch(url);\n      const data = await res.json();\n      const features = data.features;\n\n      // Notify any new quakes\n      if (!initial) {\n        const prevIds = (lastQuakesRef.current?.features || []).map(f => f.id);\n        for (const f of features) {\n          if (f.id && !prevIds.includes(f.id)) {\n            const mag = f.properties.mag;\n            if (mag >= 5) {\n              if (Notification.permission === 'granted') {\n                new Notification(`M${mag.toFixed(1)} quake`, {\n                  body: f.properties.place\n                });\n              } else {\n                Notification.requestPermission();\n              }\n            }\n          }\n        }\n      }\n\n      // Set or update point source\n      if (initial) {\n        mapRef.current.addSource('quake-points', { type: 'geojson', data });\n        mapRef.current.addLayer({\n          id: 'quake-points',\n          type: 'circle',\n          source: 'quake-points',\n          paint: {\n            'circle-color': '#E55E5E',\n            'circle-opacity': 0.8,\n            // radius ∝ magnitude\n            'circle-radius': ['interpolate', ['linear'], ['get', 'mag'], 5, 6, 8, 12, 10, 20]\n          }\n        });\n        // popups\n        mapRef.current.on('click', 'quake-points', ev => {\n          const { place, mag, time } = ev.features[0].properties;\n          const date = new Date(time).toLocaleString();\n          new mapboxgl.Popup({ closeButton: false })\n            .setLngLat(ev.lngLat)\n            .setHTML(`<strong>${place}</strong><br/>Mag: ${mag.toFixed(1)}<br/>${date}`)\n            .addTo(mapRef.current);\n        });\n      } else {\n        mapRef.current.getSource('quake-points').setData(data);\n      }\n\n      // Generate buffer polygons for risk zones\n      const zones = features.map(f => {\n        const radiusKm = f.properties.mag * 5; // e.g. 5 km per mag unit\n        const buffer = turfCircle(f.geometry.coordinates, radiusKm, {\n          steps: 64,\n          units: 'kilometers'\n        });\n        buffer.properties = { ...f.properties, radiusKm };\n        return buffer;\n      });\n      const zoneFC = { type: 'FeatureCollection', features: zones };\n\n      if (initial) {\n        mapRef.current.addSource('quake-zones', { type: 'geojson', data: zoneFC });\n        mapRef.current.addLayer({\n          id: 'quake-zones-fill',\n          type: 'fill',\n          source: 'quake-zones',\n          paint: {\n            'fill-color': 'rgba(255,200,200,0.3)',\n            'fill-outline-color': 'rgba(255,100,100,0.5)'\n          }\n        });\n      } else {\n        mapRef.current.getSource('quake-zones').setData(zoneFC);\n      }\n\n      // save for next poll\n      lastQuakesRef.current = data;\n    } catch (e) {\n      console.error('USGS fetch error:', e);\n    }\n  }\n\n  // Continuous spin via requestAnimationFrame\n  function startSpin() {\n    const map = mapRef.current;\n    let frame;\n    const animate = () => {\n      if (!spinRef.current) return;\n      const c = map.getCenter();\n      c.lng -= 0.05;\n      map.jumpTo({ center: [c.lng, c.lat] });\n      frame = requestAnimationFrame(animate);\n    };\n    animate();\n    return () => cancelAnimationFrame(frame);\n  }\n\n  function toggleSpin() {\n    spinRef.current = !spinRef.current;\n    if (spinRef.current) startSpin();\n  }\n\n  return (\n    <>\n      <div ref={mapContainer} id=\"map\" />\n      <div className=\"controls\">\n        <label>\n          Projection:\n          <select value={projection} onChange={e => setProjection(e.target.value)}>\n            <option value=\"globe\">Globe</option>\n            <option value=\"mercator\">Mercator</option>\n            <option value=\"winkelTripel\">Winkel-Tripel</option>\n            <option value=\"robinson\">Robinson</option>\n          </select>\n        </label>\n        <button onClick={toggleSpin}>Toggle Rotation</button>\n      </div>\n    </>\n  );\n}\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,QAAQ,MAAM,WAAW;AAChC,OAAOC,cAAc,MAAM,4BAA4B;AACvD,OAAO,8BAA8B;AACrC,OAAO,wDAAwD;AAC/D,SAASC,MAAM,IAAIC,UAAU,QAAQ,YAAY;AACjD,OAAO,YAAY;;AAEnB;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACAP,QAAQ,CAACQ,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB;AAEzD,eAAe,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EACjC,MAAMC,YAAY,GAAGhB,MAAM,CAAC,IAAI,CAAC;EACjC,MAAMiB,MAAM,GAAGjB,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAMkB,aAAa,GAAGlB,MAAM,CAAC,IAAI,CAAC;EAClC,MAAMmB,OAAO,GAAGnB,MAAM,CAAC,IAAI,CAAC;EAC5B,MAAM,CAACoB,UAAU,EAAEC,aAAa,CAAC,GAAGpB,QAAQ,CAAC,OAAO,CAAC;;EAErD;EACAF,SAAS,CAAC,MAAM;IACd,MAAMuB,GAAG,GAAG,IAAIpB,QAAQ,CAACqB,GAAG,CAAC;MAC3BC,SAAS,EAAER,YAAY,CAACS,OAAO;MAC/BC,KAAK,EAAE,qCAAqC;MAC5CN,UAAU,EAAEA,UAAU;MACtBO,MAAM,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC;MACfC,IAAI,EAAE,GAAG;MACTC,SAAS,EAAE;IACb,CAAC,CAAC;IACFZ,MAAM,CAACQ,OAAO,GAAGH,GAAG;;IAEpB;IACAA,GAAG,CAACQ,UAAU,CACZ,IAAI3B,cAAc,CAAC;MACjBO,WAAW,EAAER,QAAQ,CAACQ,WAAW;MACjCR;IACF,CAAC,CAAC,EACF,UACF,CAAC;IAEDoB,GAAG,CAACS,EAAE,CAAC,MAAM,EAAE,MAAM;MACnBT,GAAG,CAACU,MAAM,CAAC,CAAC,CAAC,CAAC;;MAEd;MACAC,cAAc,CAAC,IAAI,CAAC;;MAEpB;MACA,MAAMC,QAAQ,GAAGC,WAAW,CAAC,MAAMF,cAAc,CAAC,KAAK,CAAC,EAAE,KAAM,CAAC;;MAEjE;MACAG,SAAS,CAAC,CAAC;MAEX,OAAO,MAAM;QACXC,aAAa,CAACH,QAAQ,CAAC;QACvBZ,GAAG,CAACgB,MAAM,CAAC,CAAC;MACd,CAAC;IACH,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACX,IAAIrB,MAAM,CAACQ,OAAO,EAAE;QAClBR,MAAM,CAACQ,OAAO,CAACa,MAAM,CAAC,CAAC;MACzB;IACF,CAAC;IACD;EACF,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACAvC,SAAS,CAAC,MAAM;IACd,IAAIkB,MAAM,CAACQ,OAAO,EAAE;MAClBR,MAAM,CAACQ,OAAO,CAACJ,aAAa,CAAC;QAAEkB,IAAI,EAAEnB;MAAW,CAAC,CAAC;IACpD;EACF,CAAC,EAAE,CAACA,UAAU,CAAC,CAAC;;EAEhB;EACA,eAAea,cAAcA,CAACO,OAAO,EAAE;IACrC,IAAI;MACF,MAAMC,MAAM,GAAG,IAAIC,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,CACxDC,WAAW,CAAC,CAAC,CACbC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;MAChB,MAAMC,GAAG,GACP,6EAA6EL,MAAM,iBAAiB;MACtG,MAAMM,GAAG,GAAG,MAAMC,KAAK,CAACF,GAAG,CAAC;MAC5B,MAAMG,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;MAC7B,MAAMC,QAAQ,GAAGF,IAAI,CAACE,QAAQ;;MAE9B;MACA,IAAI,CAACX,OAAO,EAAE;QAAA,IAAAY,qBAAA;QACZ,MAAMC,OAAO,GAAG,CAAC,EAAAD,qBAAA,GAAAlC,aAAa,CAACO,OAAO,cAAA2B,qBAAA,uBAArBA,qBAAA,CAAuBD,QAAQ,KAAI,EAAE,EAAE7B,GAAG,CAACgC,CAAC,IAAIA,CAAC,CAACC,EAAE,CAAC;QACtE,KAAK,MAAMD,CAAC,IAAIH,QAAQ,EAAE;UACxB,IAAIG,CAAC,CAACC,EAAE,IAAI,CAACF,OAAO,CAACG,QAAQ,CAACF,CAAC,CAACC,EAAE,CAAC,EAAE;YACnC,MAAME,GAAG,GAAGH,CAAC,CAACI,UAAU,CAACD,GAAG;YAC5B,IAAIA,GAAG,IAAI,CAAC,EAAE;cACZ,IAAIE,YAAY,CAACC,UAAU,KAAK,SAAS,EAAE;gBACzC,IAAID,YAAY,CAAC,IAAIF,GAAG,CAACI,OAAO,CAAC,CAAC,CAAC,QAAQ,EAAE;kBAC3CC,IAAI,EAAER,CAAC,CAACI,UAAU,CAACK;gBACrB,CAAC,CAAC;cACJ,CAAC,MAAM;gBACLJ,YAAY,CAACK,iBAAiB,CAAC,CAAC;cAClC;YACF;UACF;QACF;MACF;;MAEA;MACA,IAAIxB,OAAO,EAAE;QACXvB,MAAM,CAACQ,OAAO,CAACwC,SAAS,CAAC,cAAc,EAAE;UAAEC,IAAI,EAAE,SAAS;UAAEjB;QAAK,CAAC,CAAC;QACnEhC,MAAM,CAACQ,OAAO,CAAC0C,QAAQ,CAAC;UACtBZ,EAAE,EAAE,cAAc;UAClBW,IAAI,EAAE,QAAQ;UACdE,MAAM,EAAE,cAAc;UACtBC,KAAK,EAAE;YACL,cAAc,EAAE,SAAS;YACzB,gBAAgB,EAAE,GAAG;YACrB;YACA,eAAe,EAAE,CAAC,aAAa,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;UAClF;QACF,CAAC,CAAC;QACF;QACApD,MAAM,CAACQ,OAAO,CAACM,EAAE,CAAC,OAAO,EAAE,cAAc,EAAEuC,EAAE,IAAI;UAC/C,MAAM;YAAEP,KAAK;YAAEN,GAAG;YAAEc;UAAK,CAAC,GAAGD,EAAE,CAACnB,QAAQ,CAAC,CAAC,CAAC,CAACO,UAAU;UACtD,MAAMc,IAAI,GAAG,IAAI9B,IAAI,CAAC6B,IAAI,CAAC,CAACE,cAAc,CAAC,CAAC;UAC5C,IAAIvE,QAAQ,CAACwE,KAAK,CAAC;YAAEC,WAAW,EAAE;UAAM,CAAC,CAAC,CACvCC,SAAS,CAACN,EAAE,CAACO,MAAM,CAAC,CACpBC,OAAO,CAAC,WAAWf,KAAK,sBAAsBN,GAAG,CAACI,OAAO,CAAC,CAAC,CAAC,QAAQW,IAAI,EAAE,CAAC,CAC3EO,KAAK,CAAC9D,MAAM,CAACQ,OAAO,CAAC;QAC1B,CAAC,CAAC;MACJ,CAAC,MAAM;QACLR,MAAM,CAACQ,OAAO,CAACuD,SAAS,CAAC,cAAc,CAAC,CAACC,OAAO,CAAChC,IAAI,CAAC;MACxD;;MAEA;MACA,MAAMiC,KAAK,GAAG/B,QAAQ,CAAC7B,GAAG,CAACgC,CAAC,IAAI;QAC9B,MAAM6B,QAAQ,GAAG7B,CAAC,CAACI,UAAU,CAACD,GAAG,GAAG,CAAC,CAAC,CAAC;QACvC,MAAM2B,MAAM,GAAG/E,UAAU,CAACiD,CAAC,CAAC+B,QAAQ,CAACC,WAAW,EAAEH,QAAQ,EAAE;UAC1DI,KAAK,EAAE,EAAE;UACTC,KAAK,EAAE;QACT,CAAC,CAAC;QACFJ,MAAM,CAAC1B,UAAU,GAAG;UAAE,GAAGJ,CAAC,CAACI,UAAU;UAAEyB;QAAS,CAAC;QACjD,OAAOC,MAAM;MACf,CAAC,CAAC;MACF,MAAMK,MAAM,GAAG;QAAEvB,IAAI,EAAE,mBAAmB;QAAEf,QAAQ,EAAE+B;MAAM,CAAC;MAE7D,IAAI1C,OAAO,EAAE;QACXvB,MAAM,CAACQ,OAAO,CAACwC,SAAS,CAAC,aAAa,EAAE;UAAEC,IAAI,EAAE,SAAS;UAAEjB,IAAI,EAAEwC;QAAO,CAAC,CAAC;QAC1ExE,MAAM,CAACQ,OAAO,CAAC0C,QAAQ,CAAC;UACtBZ,EAAE,EAAE,kBAAkB;UACtBW,IAAI,EAAE,MAAM;UACZE,MAAM,EAAE,aAAa;UACrBC,KAAK,EAAE;YACL,YAAY,EAAE,uBAAuB;YACrC,oBAAoB,EAAE;UACxB;QACF,CAAC,CAAC;MACJ,CAAC,MAAM;QACLpD,MAAM,CAACQ,OAAO,CAACuD,SAAS,CAAC,aAAa,CAAC,CAACC,OAAO,CAACQ,MAAM,CAAC;MACzD;;MAEA;MACAvE,aAAa,CAACO,OAAO,GAAGwB,IAAI;IAC9B,CAAC,CAAC,OAAOyC,CAAC,EAAE;MACVC,OAAO,CAACC,KAAK,CAAC,mBAAmB,EAAEF,CAAC,CAAC;IACvC;EACF;;EAEA;EACA,SAAStD,SAASA,CAAA,EAAG;IACnB,MAAMd,GAAG,GAAGL,MAAM,CAACQ,OAAO;IAC1B,IAAIoE,KAAK;IACT,MAAMC,OAAO,GAAGA,CAAA,KAAM;MACpB,IAAI,CAAC3E,OAAO,CAACM,OAAO,EAAE;MACtB,MAAMsE,CAAC,GAAGzE,GAAG,CAAC0E,SAAS,CAAC,CAAC;MACzBD,CAAC,CAACE,GAAG,IAAI,IAAI;MACb3E,GAAG,CAAC4E,MAAM,CAAC;QAAEvE,MAAM,EAAE,CAACoE,CAAC,CAACE,GAAG,EAAEF,CAAC,CAACI,GAAG;MAAE,CAAC,CAAC;MACtCN,KAAK,GAAGO,qBAAqB,CAACN,OAAO,CAAC;IACxC,CAAC;IACDA,OAAO,CAAC,CAAC;IACT,OAAO,MAAMO,oBAAoB,CAACR,KAAK,CAAC;EAC1C;EAEA,SAASS,UAAUA,CAAA,EAAG;IACpBnF,OAAO,CAACM,OAAO,GAAG,CAACN,OAAO,CAACM,OAAO;IAClC,IAAIN,OAAO,CAACM,OAAO,EAAEW,SAAS,CAAC,CAAC;EAClC;EAEA,oBACE7B,OAAA,CAAAE,SAAA;IAAA8F,QAAA,gBACEhG,OAAA;MAAKiG,GAAG,EAAExF,YAAa;MAACuC,EAAE,EAAC;IAAK;MAAAkD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACnCrG,OAAA;MAAKsG,SAAS,EAAC,UAAU;MAAAN,QAAA,gBACvBhG,OAAA;QAAAgG,QAAA,GAAO,aAEL,eAAAhG,OAAA;UAAQuG,KAAK,EAAE1F,UAAW;UAAC2F,QAAQ,EAAErB,CAAC,IAAIrE,aAAa,CAACqE,CAAC,CAACsB,MAAM,CAACF,KAAK,CAAE;UAAAP,QAAA,gBACtEhG,OAAA;YAAQuG,KAAK,EAAC,OAAO;YAAAP,QAAA,EAAC;UAAK;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACpCrG,OAAA;YAAQuG,KAAK,EAAC,UAAU;YAAAP,QAAA,EAAC;UAAQ;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eAC1CrG,OAAA;YAAQuG,KAAK,EAAC,cAAc;YAAAP,QAAA,EAAC;UAAa;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC,eACnDrG,OAAA;YAAQuG,KAAK,EAAC,UAAU;YAAAP,QAAA,EAAC;UAAQ;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ,CAAC,eACRrG,OAAA;QAAQ0G,OAAO,EAAEX,UAAW;QAAAC,QAAA,EAAC;MAAe;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClD,CAAC;EAAA,eACN,CAAC;AAEP;AAAC7F,EAAA,CA/LuBD,QAAQ;AAAAoG,EAAA,GAARpG,QAAQ;AAAA,IAAAoG,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}