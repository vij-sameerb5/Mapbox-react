{"ast":null,"code":"'use strict';\n\nfunction parseSingleHeader(raw) {\n  var boundary = raw.indexOf(':');\n  var name = raw.substring(0, boundary).trim().toLowerCase();\n  var value = raw.substring(boundary + 1).trim();\n  return {\n    name: name,\n    value: value\n  };\n}\n\n/**\n * Parse raw headers into an object with lowercase properties.\n * Does not fully parse headings into more complete data structure,\n * as larger libraries might do. Also does not deal with duplicate\n * headers because Node doesn't seem to deal with those well, so\n * we shouldn't let the browser either, for consistency.\n *\n * @param {string} raw\n * @returns {Object}\n */\nfunction parseHeaders(raw) {\n  var headers = {};\n  if (!raw) {\n    return headers;\n  }\n  raw.trim().split(/[\\r|\\n]+/).forEach(function (rawHeader) {\n    var parsed = parseSingleHeader(rawHeader);\n    headers[parsed.name] = parsed.value;\n  });\n  return headers;\n}\nmodule.exports = parseHeaders;","map":{"version":3,"names":["parseSingleHeader","raw","boundary","indexOf","name","substring","trim","toLowerCase","value","parseHeaders","headers","split","forEach","rawHeader","parsed","module","exports"],"sources":["/Users/sameershaik/Desktop/mapbox-react/node_modules/@mapbox/mapbox-sdk/lib/helpers/parse-headers.js"],"sourcesContent":["'use strict';\n\nfunction parseSingleHeader(raw) {\n  var boundary = raw.indexOf(':');\n  var name = raw\n    .substring(0, boundary)\n    .trim()\n    .toLowerCase();\n  var value = raw.substring(boundary + 1).trim();\n  return {\n    name: name,\n    value: value\n  };\n}\n\n/**\n * Parse raw headers into an object with lowercase properties.\n * Does not fully parse headings into more complete data structure,\n * as larger libraries might do. Also does not deal with duplicate\n * headers because Node doesn't seem to deal with those well, so\n * we shouldn't let the browser either, for consistency.\n *\n * @param {string} raw\n * @returns {Object}\n */\nfunction parseHeaders(raw) {\n  var headers = {};\n  if (!raw) {\n    return headers;\n  }\n\n  raw\n    .trim()\n    .split(/[\\r|\\n]+/)\n    .forEach(function(rawHeader) {\n      var parsed = parseSingleHeader(rawHeader);\n      headers[parsed.name] = parsed.value;\n    });\n\n  return headers;\n}\n\nmodule.exports = parseHeaders;\n"],"mappings":"AAAA,YAAY;;AAEZ,SAASA,iBAAiBA,CAACC,GAAG,EAAE;EAC9B,IAAIC,QAAQ,GAAGD,GAAG,CAACE,OAAO,CAAC,GAAG,CAAC;EAC/B,IAAIC,IAAI,GAAGH,GAAG,CACXI,SAAS,CAAC,CAAC,EAAEH,QAAQ,CAAC,CACtBI,IAAI,CAAC,CAAC,CACNC,WAAW,CAAC,CAAC;EAChB,IAAIC,KAAK,GAAGP,GAAG,CAACI,SAAS,CAACH,QAAQ,GAAG,CAAC,CAAC,CAACI,IAAI,CAAC,CAAC;EAC9C,OAAO;IACLF,IAAI,EAAEA,IAAI;IACVI,KAAK,EAAEA;EACT,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,YAAYA,CAACR,GAAG,EAAE;EACzB,IAAIS,OAAO,GAAG,CAAC,CAAC;EAChB,IAAI,CAACT,GAAG,EAAE;IACR,OAAOS,OAAO;EAChB;EAEAT,GAAG,CACAK,IAAI,CAAC,CAAC,CACNK,KAAK,CAAC,UAAU,CAAC,CACjBC,OAAO,CAAC,UAASC,SAAS,EAAE;IAC3B,IAAIC,MAAM,GAAGd,iBAAiB,CAACa,SAAS,CAAC;IACzCH,OAAO,CAACI,MAAM,CAACV,IAAI,CAAC,GAAGU,MAAM,CAACN,KAAK;EACrC,CAAC,CAAC;EAEJ,OAAOE,OAAO;AAChB;AAEAK,MAAM,CAACC,OAAO,GAAGP,YAAY","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}