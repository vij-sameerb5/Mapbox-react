{"ast":null,"code":"/**\n * This function transforms the feature from reverse geocoding to plain text with specified accuracy\n * @param {object} feature \n * @param {string} accuracy \n * @returns \n */\nfunction transformFeatureToGeolocationText(feature, accuracy) {\n  const addrInfo = getAddressInfo(feature);\n  const addressAccuracy = ['address', 'street', 'place', 'country'];\n  var currentAccuracy;\n  if (typeof accuracy === 'function') {\n    return accuracy(addrInfo);\n  }\n  const accuracyIndex = addressAccuracy.indexOf(accuracy);\n  if (accuracyIndex === -1) {\n    currentAccuracy = addressAccuracy;\n  } else {\n    currentAccuracy = addressAccuracy.slice(accuracyIndex);\n  }\n  return currentAccuracy.reduce(function (acc, name) {\n    if (!addrInfo[name]) {\n      return acc;\n    }\n    if (acc !== '') {\n      acc = acc + ', ';\n    }\n    return acc + addrInfo[name];\n  }, '');\n}\n/**\n * This function transforms the feature from reverse geocoding to AddressInfo object\n * @param {object} feature \n * @returns {object}\n */\nfunction getAddressInfo(feature) {\n  const houseNumber = feature.address || '';\n  const street = feature.text || '';\n  const placeName = feature.place_name || '';\n  const address = placeName.split(',')[0];\n  const addrInfo = {\n    address: address,\n    houseNumber: houseNumber,\n    street: street,\n    placeName: placeName\n  };\n  feature.context.forEach(function (context) {\n    const layer = context.id.split('.')[0];\n    addrInfo[layer] = context.text;\n  });\n  return addrInfo;\n}\nconst REVERSE_GEOCODE_COORD_RGX = /^[ ]*(-?\\d{1,3}(\\.\\d{0,256})?)[, ]+(-?\\d{1,3}(\\.\\d{0,256})?)[ ]*$/;\nmodule.exports = {\n  transformFeatureToGeolocationText: transformFeatureToGeolocationText,\n  getAddressInfo: getAddressInfo,\n  REVERSE_GEOCODE_COORD_RGX: REVERSE_GEOCODE_COORD_RGX\n};","map":{"version":3,"names":["transformFeatureToGeolocationText","feature","accuracy","addrInfo","getAddressInfo","addressAccuracy","currentAccuracy","accuracyIndex","indexOf","slice","reduce","acc","name","houseNumber","address","street","text","placeName","place_name","split","context","forEach","layer","id","REVERSE_GEOCODE_COORD_RGX","module","exports"],"sources":["/Users/sameershaik/Desktop/mapbox-react/node_modules/@mapbox/mapbox-gl-geocoder/lib/utils.js"],"sourcesContent":["/**\n * This function transforms the feature from reverse geocoding to plain text with specified accuracy\n * @param {object} feature \n * @param {string} accuracy \n * @returns \n */\nfunction transformFeatureToGeolocationText(feature, accuracy) {\n  const addrInfo = getAddressInfo(feature);\n\n  const addressAccuracy =  ['address', 'street', 'place', 'country'];\n  var currentAccuracy;\n\n  if (typeof accuracy === 'function') {\n    return accuracy(addrInfo)\n  }\n\n  const accuracyIndex = addressAccuracy.indexOf(accuracy);\n\n  if (accuracyIndex === -1) {\n    currentAccuracy = addressAccuracy;\n  } else {\n    currentAccuracy = addressAccuracy.slice(accuracyIndex);\n  }\n\n  return currentAccuracy.reduce(function(acc, name) {\n    if (!addrInfo[name]) {\n      return acc;\n    }\n\n    if (acc !== '') {\n      acc = acc + ', ';\n    }\n\n    return acc + addrInfo[name];\n  }, '');\n}\n/**\n * This function transforms the feature from reverse geocoding to AddressInfo object\n * @param {object} feature \n * @returns {object}\n */\nfunction getAddressInfo(feature) {\n  const houseNumber = feature.address || '';\n  const street = feature.text || '';\n  const placeName = feature.place_name || '';\n  const address = placeName.split(',')[0];\n\n  const addrInfo = {\n    address: address,\n    houseNumber: houseNumber,\n    street: street,\n    placeName: placeName,\n  }\n\n  feature.context.forEach(function (context) {\n    const layer = context.id.split('.')[0];\n    addrInfo[layer] = context.text;\n  });\n\n  return addrInfo;\n}\n\nconst REVERSE_GEOCODE_COORD_RGX = /^[ ]*(-?\\d{1,3}(\\.\\d{0,256})?)[, ]+(-?\\d{1,3}(\\.\\d{0,256})?)[ ]*$/;\n\nmodule.exports = {\n  transformFeatureToGeolocationText: transformFeatureToGeolocationText,\n  getAddressInfo: getAddressInfo,\n  REVERSE_GEOCODE_COORD_RGX: REVERSE_GEOCODE_COORD_RGX,\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,iCAAiCA,CAACC,OAAO,EAAEC,QAAQ,EAAE;EAC5D,MAAMC,QAAQ,GAAGC,cAAc,CAACH,OAAO,CAAC;EAExC,MAAMI,eAAe,GAAI,CAAC,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,SAAS,CAAC;EAClE,IAAIC,eAAe;EAEnB,IAAI,OAAOJ,QAAQ,KAAK,UAAU,EAAE;IAClC,OAAOA,QAAQ,CAACC,QAAQ,CAAC;EAC3B;EAEA,MAAMI,aAAa,GAAGF,eAAe,CAACG,OAAO,CAACN,QAAQ,CAAC;EAEvD,IAAIK,aAAa,KAAK,CAAC,CAAC,EAAE;IACxBD,eAAe,GAAGD,eAAe;EACnC,CAAC,MAAM;IACLC,eAAe,GAAGD,eAAe,CAACI,KAAK,CAACF,aAAa,CAAC;EACxD;EAEA,OAAOD,eAAe,CAACI,MAAM,CAAC,UAASC,GAAG,EAAEC,IAAI,EAAE;IAChD,IAAI,CAACT,QAAQ,CAACS,IAAI,CAAC,EAAE;MACnB,OAAOD,GAAG;IACZ;IAEA,IAAIA,GAAG,KAAK,EAAE,EAAE;MACdA,GAAG,GAAGA,GAAG,GAAG,IAAI;IAClB;IAEA,OAAOA,GAAG,GAAGR,QAAQ,CAACS,IAAI,CAAC;EAC7B,CAAC,EAAE,EAAE,CAAC;AACR;AACA;AACA;AACA;AACA;AACA;AACA,SAASR,cAAcA,CAACH,OAAO,EAAE;EAC/B,MAAMY,WAAW,GAAGZ,OAAO,CAACa,OAAO,IAAI,EAAE;EACzC,MAAMC,MAAM,GAAGd,OAAO,CAACe,IAAI,IAAI,EAAE;EACjC,MAAMC,SAAS,GAAGhB,OAAO,CAACiB,UAAU,IAAI,EAAE;EAC1C,MAAMJ,OAAO,GAAGG,SAAS,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAEvC,MAAMhB,QAAQ,GAAG;IACfW,OAAO,EAAEA,OAAO;IAChBD,WAAW,EAAEA,WAAW;IACxBE,MAAM,EAAEA,MAAM;IACdE,SAAS,EAAEA;EACb,CAAC;EAEDhB,OAAO,CAACmB,OAAO,CAACC,OAAO,CAAC,UAAUD,OAAO,EAAE;IACzC,MAAME,KAAK,GAAGF,OAAO,CAACG,EAAE,CAACJ,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACtChB,QAAQ,CAACmB,KAAK,CAAC,GAAGF,OAAO,CAACJ,IAAI;EAChC,CAAC,CAAC;EAEF,OAAOb,QAAQ;AACjB;AAEA,MAAMqB,yBAAyB,GAAG,mEAAmE;AAErGC,MAAM,CAACC,OAAO,GAAG;EACf1B,iCAAiC,EAAEA,iCAAiC;EACpEI,cAAc,EAAEA,cAAc;EAC9BoB,yBAAyB,EAAEA;AAC7B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}