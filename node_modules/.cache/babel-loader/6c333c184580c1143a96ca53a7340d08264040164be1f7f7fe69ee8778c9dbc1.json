{"ast":null,"code":"/*\n * Fuzzy\n * https://github.com/myork/fuzzy\n *\n * Copyright (c) 2012 Matt York\n * Licensed under the MIT license.\n */\n\n(function () {\n  var root = this;\n  var fuzzy = {};\n\n  // Use in node or in browser\n  if (typeof exports !== 'undefined') {\n    module.exports = fuzzy;\n  } else {\n    root.fuzzy = fuzzy;\n  }\n\n  // Return all elements of `array` that have a fuzzy\n  // match against `pattern`.\n  fuzzy.simpleFilter = function (pattern, array) {\n    return array.filter(function (str) {\n      return fuzzy.test(pattern, str);\n    });\n  };\n\n  // Does `pattern` fuzzy match `str`?\n  fuzzy.test = function (pattern, str) {\n    return fuzzy.match(pattern, str) !== null;\n  };\n\n  // If `pattern` matches `str`, wrap each matching character\n  // in `opts.pre` and `opts.post`. If no match, return null\n  fuzzy.match = function (pattern, str, opts) {\n    opts = opts || {};\n    var patternIdx = 0,\n      result = [],\n      len = str.length,\n      totalScore = 0,\n      currScore = 0\n      // prefix\n      ,\n      pre = opts.pre || ''\n      // suffix\n      ,\n      post = opts.post || ''\n      // String to compare against. This might be a lowercase version of the\n      // raw string\n      ,\n      compareString = opts.caseSensitive && str || str.toLowerCase(),\n      ch;\n    pattern = opts.caseSensitive && pattern || pattern.toLowerCase();\n\n    // For each character in the string, either add it to the result\n    // or wrap in template if it's the next string in the pattern\n    for (var idx = 0; idx < len; idx++) {\n      ch = str[idx];\n      if (compareString[idx] === pattern[patternIdx]) {\n        ch = pre + ch + post;\n        patternIdx += 1;\n\n        // consecutive characters should increase the score more than linearly\n        currScore += 1 + currScore;\n      } else {\n        currScore = 0;\n      }\n      totalScore += currScore;\n      result[result.length] = ch;\n    }\n\n    // return rendered string if we have a match for every char\n    if (patternIdx === pattern.length) {\n      // if the string is an exact match with pattern, totalScore should be maxed\n      totalScore = compareString === pattern ? Infinity : totalScore;\n      return {\n        rendered: result.join(''),\n        score: totalScore\n      };\n    }\n    return null;\n  };\n\n  // The normal entry point. Filters `arr` for matches against `pattern`.\n  // It returns an array with matching values of the type:\n  //\n  //     [{\n  //         string:   '<b>lah' // The rendered string\n  //       , index:    2        // The index of the element in `arr`\n  //       , original: 'blah'   // The original element in `arr`\n  //     }]\n  //\n  // `opts` is an optional argument bag. Details:\n  //\n  //    opts = {\n  //        // string to put before a matching character\n  //        pre:     '<b>'\n  //\n  //        // string to put after matching character\n  //      , post:    '</b>'\n  //\n  //        // Optional function. Input is an entry in the given arr`,\n  //        // output should be the string to test `pattern` against.\n  //        // In this example, if `arr = [{crying: 'koala'}]` we would return\n  //        // 'koala'.\n  //      , extract: function(arg) { return arg.crying; }\n  //    }\n  fuzzy.filter = function (pattern, arr, opts) {\n    if (!arr || arr.length === 0) {\n      return [];\n    }\n    if (typeof pattern !== 'string') {\n      return arr;\n    }\n    opts = opts || {};\n    return arr.reduce(function (prev, element, idx, arr) {\n      var str = element;\n      if (opts.extract) {\n        str = opts.extract(element);\n      }\n      var rendered = fuzzy.match(pattern, str, opts);\n      if (rendered != null) {\n        prev[prev.length] = {\n          string: rendered.rendered,\n          score: rendered.score,\n          index: idx,\n          original: element\n        };\n      }\n      return prev;\n    }, [])\n\n    // Sort by score. Browsers are inconsistent wrt stable/unstable\n    // sorting, so force stable by using the index in the case of tie.\n    // See http://ofb.net/~sethml/is-sort-stable.html\n    .sort(function (a, b) {\n      var compare = b.score - a.score;\n      if (compare) return compare;\n      return a.index - b.index;\n    });\n  };\n})();","map":{"version":3,"names":["root","fuzzy","exports","module","simpleFilter","pattern","array","filter","str","test","match","opts","patternIdx","result","len","length","totalScore","currScore","pre","post","compareString","caseSensitive","toLowerCase","ch","idx","Infinity","rendered","join","score","arr","reduce","prev","element","extract","string","index","original","sort","a","b","compare"],"sources":["/Users/sameershaik/Desktop/mapbox-react/node_modules/fuzzy/lib/fuzzy.js"],"sourcesContent":["/*\n * Fuzzy\n * https://github.com/myork/fuzzy\n *\n * Copyright (c) 2012 Matt York\n * Licensed under the MIT license.\n */\n\n(function() {\n\nvar root = this;\n\nvar fuzzy = {};\n\n// Use in node or in browser\nif (typeof exports !== 'undefined') {\n  module.exports = fuzzy;\n} else {\n  root.fuzzy = fuzzy;\n}\n\n// Return all elements of `array` that have a fuzzy\n// match against `pattern`.\nfuzzy.simpleFilter = function(pattern, array) {\n  return array.filter(function(str) {\n    return fuzzy.test(pattern, str);\n  });\n};\n\n// Does `pattern` fuzzy match `str`?\nfuzzy.test = function(pattern, str) {\n  return fuzzy.match(pattern, str) !== null;\n};\n\n// If `pattern` matches `str`, wrap each matching character\n// in `opts.pre` and `opts.post`. If no match, return null\nfuzzy.match = function(pattern, str, opts) {\n  opts = opts || {};\n  var patternIdx = 0\n    , result = []\n    , len = str.length\n    , totalScore = 0\n    , currScore = 0\n    // prefix\n    , pre = opts.pre || ''\n    // suffix\n    , post = opts.post || ''\n    // String to compare against. This might be a lowercase version of the\n    // raw string\n    , compareString =  opts.caseSensitive && str || str.toLowerCase()\n    , ch;\n\n  pattern = opts.caseSensitive && pattern || pattern.toLowerCase();\n\n  // For each character in the string, either add it to the result\n  // or wrap in template if it's the next string in the pattern\n  for(var idx = 0; idx < len; idx++) {\n    ch = str[idx];\n    if(compareString[idx] === pattern[patternIdx]) {\n      ch = pre + ch + post;\n      patternIdx += 1;\n\n      // consecutive characters should increase the score more than linearly\n      currScore += 1 + currScore;\n    } else {\n      currScore = 0;\n    }\n    totalScore += currScore;\n    result[result.length] = ch;\n  }\n\n  // return rendered string if we have a match for every char\n  if(patternIdx === pattern.length) {\n    // if the string is an exact match with pattern, totalScore should be maxed\n    totalScore = (compareString === pattern) ? Infinity : totalScore;\n    return {rendered: result.join(''), score: totalScore};\n  }\n\n  return null;\n};\n\n// The normal entry point. Filters `arr` for matches against `pattern`.\n// It returns an array with matching values of the type:\n//\n//     [{\n//         string:   '<b>lah' // The rendered string\n//       , index:    2        // The index of the element in `arr`\n//       , original: 'blah'   // The original element in `arr`\n//     }]\n//\n// `opts` is an optional argument bag. Details:\n//\n//    opts = {\n//        // string to put before a matching character\n//        pre:     '<b>'\n//\n//        // string to put after matching character\n//      , post:    '</b>'\n//\n//        // Optional function. Input is an entry in the given arr`,\n//        // output should be the string to test `pattern` against.\n//        // In this example, if `arr = [{crying: 'koala'}]` we would return\n//        // 'koala'.\n//      , extract: function(arg) { return arg.crying; }\n//    }\nfuzzy.filter = function(pattern, arr, opts) {\n  if(!arr || arr.length === 0) {\n    return [];\n  }\n  if (typeof pattern !== 'string') {\n    return arr;\n  }\n  opts = opts || {};\n  return arr\n    .reduce(function(prev, element, idx, arr) {\n      var str = element;\n      if(opts.extract) {\n        str = opts.extract(element);\n      }\n      var rendered = fuzzy.match(pattern, str, opts);\n      if(rendered != null) {\n        prev[prev.length] = {\n            string: rendered.rendered\n          , score: rendered.score\n          , index: idx\n          , original: element\n        };\n      }\n      return prev;\n    }, [])\n\n    // Sort by score. Browsers are inconsistent wrt stable/unstable\n    // sorting, so force stable by using the index in the case of tie.\n    // See http://ofb.net/~sethml/is-sort-stable.html\n    .sort(function(a,b) {\n      var compare = b.score - a.score;\n      if(compare) return compare;\n      return a.index - b.index;\n    });\n};\n\n\n}());\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}