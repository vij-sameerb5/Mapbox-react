{"ast":null,"code":"'use strict';\n\nvar constants = require('../constants');\n\n/**\n * A Mapbox API error.\n *\n * If there's an error during the API transaction,\n * the Promise returned by `MapiRequest`'s [`send`](#send)\n * method should reject with a `MapiError`.\n *\n * @class MapiError\n * @hideconstructor\n * @property {MapiRequest} request - The errored request.\n * @property {string} type - The type of error. Usually this is `'HttpError'`.\n *   If the request was aborted, so the error was\n *   not sent from the server, the type will be\n *   `'RequestAbortedError'`.\n * @property {number} [statusCode] - The numeric status code of\n *   the HTTP response.\n * @property {Object | string} [body] - If the server sent a response body,\n *   this property exposes that response, parsed as JSON if possible.\n * @property {string} [message] - Whatever message could be derived from the\n *   call site and HTTP response.\n *\n * @param {MapiRequest} options.request\n * @param {number} [options.statusCode]\n * @param {string} [options.body]\n * @param {string} [options.message]\n * @param {string} [options.type]\n */\nfunction MapiError(options) {\n  var errorType = options.type || constants.ERROR_HTTP;\n  var body;\n  if (options.body) {\n    try {\n      body = JSON.parse(options.body);\n    } catch (e) {\n      body = options.body;\n    }\n  } else {\n    body = null;\n  }\n  var message = options.message || null;\n  if (!message) {\n    if (typeof body === 'string') {\n      message = body;\n    } else if (body && typeof body.message === 'string') {\n      message = body.message;\n    } else if (errorType === constants.ERROR_REQUEST_ABORTED) {\n      message = 'Request aborted';\n    }\n  }\n  this.message = message;\n  this.type = errorType;\n  this.statusCode = options.statusCode || null;\n  this.request = options.request;\n  this.body = body;\n}\nmodule.exports = MapiError;","map":{"version":3,"names":["constants","require","MapiError","options","errorType","type","ERROR_HTTP","body","JSON","parse","e","message","ERROR_REQUEST_ABORTED","statusCode","request","module","exports"],"sources":["/Users/sameershaik/Desktop/mapbox-react/node_modules/@mapbox/mapbox-sdk/lib/classes/mapi-error.js"],"sourcesContent":["'use strict';\n\nvar constants = require('../constants');\n\n/**\n * A Mapbox API error.\n *\n * If there's an error during the API transaction,\n * the Promise returned by `MapiRequest`'s [`send`](#send)\n * method should reject with a `MapiError`.\n *\n * @class MapiError\n * @hideconstructor\n * @property {MapiRequest} request - The errored request.\n * @property {string} type - The type of error. Usually this is `'HttpError'`.\n *   If the request was aborted, so the error was\n *   not sent from the server, the type will be\n *   `'RequestAbortedError'`.\n * @property {number} [statusCode] - The numeric status code of\n *   the HTTP response.\n * @property {Object | string} [body] - If the server sent a response body,\n *   this property exposes that response, parsed as JSON if possible.\n * @property {string} [message] - Whatever message could be derived from the\n *   call site and HTTP response.\n *\n * @param {MapiRequest} options.request\n * @param {number} [options.statusCode]\n * @param {string} [options.body]\n * @param {string} [options.message]\n * @param {string} [options.type]\n */\nfunction MapiError(options) {\n  var errorType = options.type || constants.ERROR_HTTP;\n\n  var body;\n  if (options.body) {\n    try {\n      body = JSON.parse(options.body);\n    } catch (e) {\n      body = options.body;\n    }\n  } else {\n    body = null;\n  }\n\n  var message = options.message || null;\n  if (!message) {\n    if (typeof body === 'string') {\n      message = body;\n    } else if (body && typeof body.message === 'string') {\n      message = body.message;\n    } else if (errorType === constants.ERROR_REQUEST_ABORTED) {\n      message = 'Request aborted';\n    }\n  }\n\n  this.message = message;\n  this.type = errorType;\n  this.statusCode = options.statusCode || null;\n  this.request = options.request;\n  this.body = body;\n}\n\nmodule.exports = MapiError;\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,SAAS,GAAGC,OAAO,CAAC,cAAc,CAAC;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,SAASA,CAACC,OAAO,EAAE;EAC1B,IAAIC,SAAS,GAAGD,OAAO,CAACE,IAAI,IAAIL,SAAS,CAACM,UAAU;EAEpD,IAAIC,IAAI;EACR,IAAIJ,OAAO,CAACI,IAAI,EAAE;IAChB,IAAI;MACFA,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACN,OAAO,CAACI,IAAI,CAAC;IACjC,CAAC,CAAC,OAAOG,CAAC,EAAE;MACVH,IAAI,GAAGJ,OAAO,CAACI,IAAI;IACrB;EACF,CAAC,MAAM;IACLA,IAAI,GAAG,IAAI;EACb;EAEA,IAAII,OAAO,GAAGR,OAAO,CAACQ,OAAO,IAAI,IAAI;EACrC,IAAI,CAACA,OAAO,EAAE;IACZ,IAAI,OAAOJ,IAAI,KAAK,QAAQ,EAAE;MAC5BI,OAAO,GAAGJ,IAAI;IAChB,CAAC,MAAM,IAAIA,IAAI,IAAI,OAAOA,IAAI,CAACI,OAAO,KAAK,QAAQ,EAAE;MACnDA,OAAO,GAAGJ,IAAI,CAACI,OAAO;IACxB,CAAC,MAAM,IAAIP,SAAS,KAAKJ,SAAS,CAACY,qBAAqB,EAAE;MACxDD,OAAO,GAAG,iBAAiB;IAC7B;EACF;EAEA,IAAI,CAACA,OAAO,GAAGA,OAAO;EACtB,IAAI,CAACN,IAAI,GAAGD,SAAS;EACrB,IAAI,CAACS,UAAU,GAAGV,OAAO,CAACU,UAAU,IAAI,IAAI;EAC5C,IAAI,CAACC,OAAO,GAAGX,OAAO,CAACW,OAAO;EAC9B,IAAI,CAACP,IAAI,GAAGA,IAAI;AAClB;AAEAQ,MAAM,CAACC,OAAO,GAAGd,SAAS","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}