{"ast":null,"code":"'use strict';\n\nvar parseToken = require('@mapbox/parse-mapbox-token');\nvar xtend = require('xtend');\nvar EventEmitter = require('eventemitter3');\nvar urlUtils = require('../helpers/url-utils');\nvar constants = require('../constants');\nvar requestId = 1;\n\n/**\n * A Mapbox API request.\n *\n * Note that creating a `MapiRequest` does *not* send the request automatically.\n * Use the request's `send` method to send it off and get a `Promise`.\n *\n * The `emitter` property is an `EventEmitter` that emits the following events:\n *\n * - `'response'` - Listeners will be called with a `MapiResponse`.\n * - `'error'` - Listeners will be called with a `MapiError`.\n * - `'downloadProgress'` - Listeners will be called with `ProgressEvents`.\n * - `'uploadProgress'` - Listeners will be called with `ProgressEvents`.\n *   Upload events are only available when the request includes a file.\n *\n * @class MapiRequest\n * @property {EventEmitter} emitter - An event emitter. See above.\n * @property {MapiClient} client - This request's `MapiClient`.\n * @property {MapiResponse|null} response - If this request has been sent and received\n *   a response, the response is available on this property.\n * @property {MapiError|Error|null} error - If this request has been sent and\n *   received an error in response, the error is available on this property.\n * @property {boolean} aborted - If the request has been aborted\n *   (via [`abort`](#abort)), this property will be `true`.\n * @property {boolean} sent - If the request has been sent, this property will\n *   be `true`. You cannot send the same request twice, so if you need to create\n *   a new request that is the equivalent of an existing one, use\n *   [`clone`](#clone).\n * @property {string} path - The request's path, including colon-prefixed route\n *   parameters.\n * @property {string} origin - The request's origin.\n * @property {string} method - The request's HTTP method.\n * @property {Object} query - A query object, which will be transformed into\n *   a URL query string.\n * @property {Object} params - A route parameters object, whose values will\n *   be interpolated the path.\n * @property {Object} headers - The request's headers.\n * @property {Object|string|null} body - Data to send with the request.\n *   If the request has a body, it will also be sent with the header\n *   `'Content-Type: application/json'`.\n * @property {Blob|ArrayBuffer|string|ReadStream} file - A file to\n *   send with the request. The browser client accepts Blobs and ArrayBuffers;\n *   the Node client accepts strings (filepaths) and ReadStreams.\n * @property {string} encoding - The encoding of the response.\n * @property {string} sendFileAs - The method to send the `file`. Options are\n *   `data` (x-www-form-urlencoded) or `form` (multipart/form-data).\n */\n\n/**\n * @ignore\n * @param {MapiClient} client\n * @param {Object} options\n * @param {string} options.method\n * @param {string} options.path\n * @param {Object} [options.query={}]\n * @param {Object} [options.params={}]\n * @param {string} [options.origin]\n * @param {Object} [options.headers]\n * @param {Object} [options.body=null]\n * @param {Blob|ArrayBuffer|string|ReadStream} [options.file=null]\n * @param {string} [options.encoding=utf8]\n */\nfunction MapiRequest(client, options) {\n  if (!client) {\n    throw new Error('MapiRequest requires a client');\n  }\n  if (!options || !options.path || !options.method) {\n    throw new Error('MapiRequest requires an options object with path and method properties');\n  }\n  var defaultHeaders = {};\n  if (options.body) {\n    defaultHeaders['content-type'] = 'application/json';\n  }\n  var headersWithDefaults = xtend(defaultHeaders, options.headers);\n\n  // Disallows duplicate header names of mixed case,\n  // e.g. Content-Type and content-type.\n  var headers = Object.keys(headersWithDefaults).reduce(function (memo, name) {\n    memo[name.toLowerCase()] = headersWithDefaults[name];\n    return memo;\n  }, {});\n  this.id = requestId++;\n  this._options = options;\n  this.emitter = new EventEmitter();\n  this.client = client;\n  this.response = null;\n  this.error = null;\n  this.sent = false;\n  this.aborted = false;\n  this.path = options.path;\n  this.method = options.method;\n  this.origin = options.origin || client.origin;\n  this.query = options.query || {};\n  this.params = options.params || {};\n  this.body = options.body || null;\n  this.file = options.file || null;\n  this.encoding = options.encoding || 'utf8';\n  this.sendFileAs = options.sendFileAs || null;\n  this.headers = headers;\n}\n\n/**\n * Get the URL of the request.\n *\n * @param {string} [accessToken] - By default, the access token of the request's\n *   client is used.\n * @return {string}\n */\nMapiRequest.prototype.url = function url(accessToken) {\n  var url = urlUtils.prependOrigin(this.path, this.origin);\n  url = urlUtils.appendQueryObject(url, this.query);\n  var routeParams = this.params;\n  var actualAccessToken = accessToken == null ? this.client.accessToken : accessToken;\n  if (actualAccessToken) {\n    url = urlUtils.appendQueryParam(url, 'access_token', actualAccessToken);\n    var accessTokenOwnerId = parseToken(actualAccessToken).user;\n    routeParams = xtend({\n      ownerId: accessTokenOwnerId\n    }, routeParams);\n  }\n  url = urlUtils.interpolateRouteParams(url, routeParams);\n  return url;\n};\n\n/**\n * Send the request. Returns a Promise that resolves with a `MapiResponse`.\n * You probably want to use `response.body`.\n *\n * `send` only retrieves the first page of paginated results. You can get\n * the next page by using the `MapiResponse`'s [`nextPage`](#nextpage)\n * function, or iterate through all pages using [`eachPage`](#eachpage)\n * instead of `send`.\n *\n * @returns {Promise<MapiResponse>}\n */\nMapiRequest.prototype.send = function send() {\n  var self = this;\n  if (self.sent) {\n    throw new Error('This request has already been sent. Check the response and error properties. Create a new request with clone().');\n  }\n  self.sent = true;\n  return self.client.sendRequest(self).then(function (response) {\n    self.response = response;\n    self.emitter.emit(constants.EVENT_RESPONSE, response);\n    return response;\n  }, function (error) {\n    self.error = error;\n    self.emitter.emit(constants.EVENT_ERROR, error);\n    throw error;\n  });\n};\n\n/**\n * Abort the request.\n *\n * Any pending `Promise` returned by [`send`](#send) will be rejected with\n * an error with `type: 'RequestAbortedError'`. If you've created a request\n * that might be aborted, you need to catch and handle such errors.\n *\n * This method will also abort any requests created while fetching subsequent\n * pages via [`eachPage`](#eachpage).\n *\n * If the request has not been sent or has already been aborted, nothing\n * will happen.\n */\nMapiRequest.prototype.abort = function abort() {\n  if (this._nextPageRequest) {\n    this._nextPageRequest.abort();\n    delete this._nextPageRequest;\n  }\n  if (this.response || this.error || this.aborted) return;\n  this.aborted = true;\n  this.client.abortRequest(this);\n};\n\n/**\n * Invoke a callback for each page of a paginated API response.\n *\n * The callback should have the following signature:\n *\n * ```js\n * (\n *   error: MapiError,\n *   response: MapiResponse,\n *   next: () => void\n * ) => void\n * ```\n *\n * **The next page will not be fetched until you've invoked the\n * `next` callback**, indicating that you're ready for it.\n *\n * @param {Function} callback\n */\nMapiRequest.prototype.eachPage = function eachPage(callback) {\n  var self = this;\n  function handleResponse(response) {\n    function getNextPage() {\n      delete self._nextPageRequest;\n      var nextPageRequest = response.nextPage();\n      if (nextPageRequest) {\n        self._nextPageRequest = nextPageRequest;\n        getPage(nextPageRequest);\n      }\n    }\n    callback(null, response, getNextPage);\n  }\n  function handleError(error) {\n    callback(error, null, function () {});\n  }\n  function getPage(request) {\n    request.send().then(handleResponse, handleError);\n  }\n  getPage(this);\n};\n\n/**\n * Clone this request.\n *\n * Each request can only be sent *once*. So if you'd like to send the\n * same request again, clone it and send away.\n *\n * @returns {MapiRequest} - A new `MapiRequest` configured just like this one.\n */\nMapiRequest.prototype.clone = function clone() {\n  return this._extend();\n};\n\n/**\n * @ignore\n */\nMapiRequest.prototype._extend = function _extend(options) {\n  var extendedOptions = xtend(this._options, options);\n  return new MapiRequest(this.client, extendedOptions);\n};\nmodule.exports = MapiRequest;","map":{"version":3,"names":["parseToken","require","xtend","EventEmitter","urlUtils","constants","requestId","MapiRequest","client","options","Error","path","method","defaultHeaders","body","headersWithDefaults","headers","Object","keys","reduce","memo","name","toLowerCase","id","_options","emitter","response","error","sent","aborted","origin","query","params","file","encoding","sendFileAs","prototype","url","accessToken","prependOrigin","appendQueryObject","routeParams","actualAccessToken","appendQueryParam","accessTokenOwnerId","user","ownerId","interpolateRouteParams","send","self","sendRequest","then","emit","EVENT_RESPONSE","EVENT_ERROR","abort","_nextPageRequest","abortRequest","eachPage","callback","handleResponse","getNextPage","nextPageRequest","nextPage","getPage","handleError","request","clone","_extend","extendedOptions","module","exports"],"sources":["/Users/sameershaik/Desktop/mapbox-react/node_modules/@mapbox/mapbox-sdk/lib/classes/mapi-request.js"],"sourcesContent":["'use strict';\n\nvar parseToken = require('@mapbox/parse-mapbox-token');\nvar xtend = require('xtend');\nvar EventEmitter = require('eventemitter3');\nvar urlUtils = require('../helpers/url-utils');\nvar constants = require('../constants');\n\nvar requestId = 1;\n\n/**\n * A Mapbox API request.\n *\n * Note that creating a `MapiRequest` does *not* send the request automatically.\n * Use the request's `send` method to send it off and get a `Promise`.\n *\n * The `emitter` property is an `EventEmitter` that emits the following events:\n *\n * - `'response'` - Listeners will be called with a `MapiResponse`.\n * - `'error'` - Listeners will be called with a `MapiError`.\n * - `'downloadProgress'` - Listeners will be called with `ProgressEvents`.\n * - `'uploadProgress'` - Listeners will be called with `ProgressEvents`.\n *   Upload events are only available when the request includes a file.\n *\n * @class MapiRequest\n * @property {EventEmitter} emitter - An event emitter. See above.\n * @property {MapiClient} client - This request's `MapiClient`.\n * @property {MapiResponse|null} response - If this request has been sent and received\n *   a response, the response is available on this property.\n * @property {MapiError|Error|null} error - If this request has been sent and\n *   received an error in response, the error is available on this property.\n * @property {boolean} aborted - If the request has been aborted\n *   (via [`abort`](#abort)), this property will be `true`.\n * @property {boolean} sent - If the request has been sent, this property will\n *   be `true`. You cannot send the same request twice, so if you need to create\n *   a new request that is the equivalent of an existing one, use\n *   [`clone`](#clone).\n * @property {string} path - The request's path, including colon-prefixed route\n *   parameters.\n * @property {string} origin - The request's origin.\n * @property {string} method - The request's HTTP method.\n * @property {Object} query - A query object, which will be transformed into\n *   a URL query string.\n * @property {Object} params - A route parameters object, whose values will\n *   be interpolated the path.\n * @property {Object} headers - The request's headers.\n * @property {Object|string|null} body - Data to send with the request.\n *   If the request has a body, it will also be sent with the header\n *   `'Content-Type: application/json'`.\n * @property {Blob|ArrayBuffer|string|ReadStream} file - A file to\n *   send with the request. The browser client accepts Blobs and ArrayBuffers;\n *   the Node client accepts strings (filepaths) and ReadStreams.\n * @property {string} encoding - The encoding of the response.\n * @property {string} sendFileAs - The method to send the `file`. Options are\n *   `data` (x-www-form-urlencoded) or `form` (multipart/form-data).\n */\n\n/**\n * @ignore\n * @param {MapiClient} client\n * @param {Object} options\n * @param {string} options.method\n * @param {string} options.path\n * @param {Object} [options.query={}]\n * @param {Object} [options.params={}]\n * @param {string} [options.origin]\n * @param {Object} [options.headers]\n * @param {Object} [options.body=null]\n * @param {Blob|ArrayBuffer|string|ReadStream} [options.file=null]\n * @param {string} [options.encoding=utf8]\n */\nfunction MapiRequest(client, options) {\n  if (!client) {\n    throw new Error('MapiRequest requires a client');\n  }\n  if (!options || !options.path || !options.method) {\n    throw new Error(\n      'MapiRequest requires an options object with path and method properties'\n    );\n  }\n\n  var defaultHeaders = {};\n  if (options.body) {\n    defaultHeaders['content-type'] = 'application/json';\n  }\n\n  var headersWithDefaults = xtend(defaultHeaders, options.headers);\n\n  // Disallows duplicate header names of mixed case,\n  // e.g. Content-Type and content-type.\n  var headers = Object.keys(headersWithDefaults).reduce(function(memo, name) {\n    memo[name.toLowerCase()] = headersWithDefaults[name];\n    return memo;\n  }, {});\n\n  this.id = requestId++;\n  this._options = options;\n\n  this.emitter = new EventEmitter();\n  this.client = client;\n  this.response = null;\n  this.error = null;\n  this.sent = false;\n  this.aborted = false;\n  this.path = options.path;\n  this.method = options.method;\n  this.origin = options.origin || client.origin;\n  this.query = options.query || {};\n  this.params = options.params || {};\n  this.body = options.body || null;\n  this.file = options.file || null;\n  this.encoding = options.encoding || 'utf8';\n  this.sendFileAs = options.sendFileAs || null;\n  this.headers = headers;\n}\n\n/**\n * Get the URL of the request.\n *\n * @param {string} [accessToken] - By default, the access token of the request's\n *   client is used.\n * @return {string}\n */\nMapiRequest.prototype.url = function url(accessToken) {\n  var url = urlUtils.prependOrigin(this.path, this.origin);\n  url = urlUtils.appendQueryObject(url, this.query);\n  var routeParams = this.params;\n  var actualAccessToken =\n    accessToken == null ? this.client.accessToken : accessToken;\n  if (actualAccessToken) {\n    url = urlUtils.appendQueryParam(url, 'access_token', actualAccessToken);\n    var accessTokenOwnerId = parseToken(actualAccessToken).user;\n    routeParams = xtend({ ownerId: accessTokenOwnerId }, routeParams);\n  }\n  url = urlUtils.interpolateRouteParams(url, routeParams);\n  return url;\n};\n\n/**\n * Send the request. Returns a Promise that resolves with a `MapiResponse`.\n * You probably want to use `response.body`.\n *\n * `send` only retrieves the first page of paginated results. You can get\n * the next page by using the `MapiResponse`'s [`nextPage`](#nextpage)\n * function, or iterate through all pages using [`eachPage`](#eachpage)\n * instead of `send`.\n *\n * @returns {Promise<MapiResponse>}\n */\nMapiRequest.prototype.send = function send() {\n  var self = this;\n\n  if (self.sent) {\n    throw new Error(\n      'This request has already been sent. Check the response and error properties. Create a new request with clone().'\n    );\n  }\n  self.sent = true;\n\n  return self.client.sendRequest(self).then(\n    function(response) {\n      self.response = response;\n      self.emitter.emit(constants.EVENT_RESPONSE, response);\n      return response;\n    },\n    function(error) {\n      self.error = error;\n      self.emitter.emit(constants.EVENT_ERROR, error);\n      throw error;\n    }\n  );\n};\n\n/**\n * Abort the request.\n *\n * Any pending `Promise` returned by [`send`](#send) will be rejected with\n * an error with `type: 'RequestAbortedError'`. If you've created a request\n * that might be aborted, you need to catch and handle such errors.\n *\n * This method will also abort any requests created while fetching subsequent\n * pages via [`eachPage`](#eachpage).\n *\n * If the request has not been sent or has already been aborted, nothing\n * will happen.\n */\nMapiRequest.prototype.abort = function abort() {\n  if (this._nextPageRequest) {\n    this._nextPageRequest.abort();\n    delete this._nextPageRequest;\n  }\n\n  if (this.response || this.error || this.aborted) return;\n\n  this.aborted = true;\n  this.client.abortRequest(this);\n};\n\n/**\n * Invoke a callback for each page of a paginated API response.\n *\n * The callback should have the following signature:\n *\n * ```js\n * (\n *   error: MapiError,\n *   response: MapiResponse,\n *   next: () => void\n * ) => void\n * ```\n *\n * **The next page will not be fetched until you've invoked the\n * `next` callback**, indicating that you're ready for it.\n *\n * @param {Function} callback\n */\nMapiRequest.prototype.eachPage = function eachPage(callback) {\n  var self = this;\n\n  function handleResponse(response) {\n    function getNextPage() {\n      delete self._nextPageRequest;\n      var nextPageRequest = response.nextPage();\n      if (nextPageRequest) {\n        self._nextPageRequest = nextPageRequest;\n        getPage(nextPageRequest);\n      }\n    }\n    callback(null, response, getNextPage);\n  }\n\n  function handleError(error) {\n    callback(error, null, function() {});\n  }\n\n  function getPage(request) {\n    request.send().then(handleResponse, handleError);\n  }\n  getPage(this);\n};\n\n/**\n * Clone this request.\n *\n * Each request can only be sent *once*. So if you'd like to send the\n * same request again, clone it and send away.\n *\n * @returns {MapiRequest} - A new `MapiRequest` configured just like this one.\n */\nMapiRequest.prototype.clone = function clone() {\n  return this._extend();\n};\n\n/**\n * @ignore\n */\nMapiRequest.prototype._extend = function _extend(options) {\n  var extendedOptions = xtend(this._options, options);\n  return new MapiRequest(this.client, extendedOptions);\n};\n\nmodule.exports = MapiRequest;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}